package accrual

// горутина, которая выбирает id заказов со статусом New и в канал отправляет каждой горутине id 
// горутина, которая меняет его на статус Processing и отправляет новый заказ в канал (буферизованный) 
// горутина, которая читает из канала, отправляет его в систему на обработку, отправляет id заказа в канал - тут нужно аккуратно посчитать количество запросов к системе -  semaphore
// горутина, которая забирает id заказа из канала, шлет запрос на update статуса заказа, при обновлении статуса записывает структуру в канал - semaphore
// горутина, которая обновляет статус конкретного заказа, считывая данные о нем из канала, и в случае чего обновляет сумму баллов на счете клиента - semaphore, но отдельный

func AccrualMain() {
	// достает новые заказы из базы
	// отправляет заказы в accrual
	// забрать заказы с новой информацией
	// загружаем новые заказы в базу данных

	// вопросы, на которые необходимо ответить: 
	// какой паттерн использовать?
	// как правильно распараллелить?


	// звучит как pipeline + worker pool

	// один из вариантов: 
	// пусть по 100 горутин идет в базу и достает новые заказы, отправляет в канал, далее менет статус заказа на Processing
	// одновременно запускается 100 goroutine, которые принимают по каналу новый заказ, отправляют в accrual-систему, 
	// записывают заказ в мапу в критической секции

	// основная горутина проходится по мапе и отдает id + value горутинам, каждая из которых 

	// шлет запрос в accrual-систему, получает ответ, сравнивает, изменился ли статус заказа, если да -
	// записывает его в базу в случае успеха отпарвляет id в канал

	// основная горутина удаляет заказ из мапы 
}